{"mappings":"YAMO,MAAAA,EAIHC,YAAYC,GACRC,KAAKC,EAAIF,EAAEE,GAAK,EAChBD,KAAKE,EAAIH,EAAEG,GAAK,yBAGGC,cACRN,EAAAA,CACPI,EAAGG,KAAKC,UAAWF,GAAKF,GAAK,GAC7BC,EAAGE,KAAKC,UAAWF,GAAKD,GAAK,KAIrCI,IAAIP,UACAC,KAAKC,GAAKF,EAAEE,EACZD,KAAKE,GAAKH,EAAEG,EACLF,KAGXO,MAAMR,UACFC,KAAKC,GAAKF,EAAEE,EACZD,KAAKE,GAAKH,EAAEG,EACLF,KAGXQ,aAAaC,UACTT,KAAKC,GAAKQ,EACVT,KAAKE,GAAKO,EACHT,KAGXU,gBACWN,KAAKO,KAAMX,KAAKC,GAAG,EAAID,KAAKE,GAAG,GAG1CU,kBACUC,EAAOb,KAAKU,gBAClBV,KAAKC,GAAKY,EACVb,KAAKE,GAAKW,EACHb,KAGXc,WAAWC,UACAX,KAAKO,MAAOX,KAAKC,EAAEc,EAAMd,IAAI,GAAKD,KAAKE,EAAEa,EAAMb,IAAI,UClDrDc,EAAAA,IAAAA,EAAAA,CAAkCf,EAAG,IAAKC,EAAG,MAE7Ce,EAA2BC,GAG3BC,EAA0BC,ICJhC,MAAAC,EAIHC,OAAiB,EAEjBxB,YAAYyB,EAAcC,EAAgBC,GACtCzB,KAAK0B,SAAAA,IAAAA,EAAsBH,GAC3BvB,KAAKwB,MAAAA,IAAAA,EAAmBA,GACxBxB,KAAKyB,KAAOA,GAAQ,EAKxBE,UAAUZ,OACDf,KAAKsB,QAAUP,EAAMO,aACf,QAELM,EAAY5B,KAAKyB,KAAK,EAAIV,EAAMU,KAAK,SAErCI,IAAAA,EAAuB7B,KAAK0B,UAAWnB,MAAMQ,EAAMW,UAAUhB,SACjDkB,EAGtBE,MACI9B,KAAKsB,OAAQ,GCxBN,MAAAS,UAAAV,EAGXvB,YAAYyB,EAAcC,EAAgBQ,GACtCC,MAAMV,EAAKC,EFEoB,GEA/BxB,KAAKwB,MAAMZ,YAAYJ,aFCS,GEChCR,KAAKkC,eAAiBF,EFAgB,KEG1CG,OACInC,KAAK0B,SAASpB,IAAIN,KAAKwB,OAG3BY,QAAQC,UACGrC,KAAKsB,OAAStB,KAAKkC,eAAiBG,GCdpC,MAAAC,UAAAjB,EACXkB,MAAe,EACfC,WAAqB,KACrBC,oBAA8B,EAE9B3C,YAAYyB,EAAcC,GACtBS,MAAMV,EAAKC,EHNe,IGS9BW,KAAKO,SACKC,EAAAA,IAAAA,EAAoB3C,KAAK0B,UAC/BiB,EAAOrC,IAAIN,KAAKwB,QAEZmB,EAAO1C,EAAAA,GAAqB,GAAK0C,EAAO1C,EAAAA,GAAAA,EAAiCA,KACzED,KAAKwB,MAAMvB,IAAM,IAEjB0C,EAAOzC,EAAAA,GAAqB,GAAKyC,EAAOzC,EAAAA,GAAAA,EAAiCA,KACzEF,KAAKwB,MAAMtB,IAAM,GAErBF,KAAK0B,SAASpB,IAAIN,KAAKwB,OAG3BoB,aAAaC,EAAc,GACvB7C,KAAKuC,OAASM,EACV7C,KAAKuC,OAAS,GACdvC,KAAK8B,MAIbgB,KAAKC,EAAmBV,MAEa,IAA7BrC,KAAKyC,oBACLzC,KAAKyC,oBAAsBJ,UAEtBA,EAAYrC,KAAKyC,oBAAsBzC,KAAKwC,WAAAA,CACjDxC,KAAKyC,oBAAsBJ,QACrBb,EAAAA,IAAAA,EAAoBuB,GAAYxC,MAAMP,KAAK0B,uBAC1B1B,KAAK0B,SAAUF,EAAQa,cC/BnD,SAAAW,EAAuBC,EAAeC,SACnCC,EAAUC,UAAUC,cAAc,GACpCF,GACAA,EAAQG,kBAAkBC,WAAW,cAAA,CACjCC,WAAY,EACZN,SAAAA,EACAO,cAAeR,EACfS,gBAAiBT,ICdd,MAAAU,UAAAtC,EACXmB,WAAqB,IACrBC,oBAA8B,EAC9BF,MAAgB,EAChBqB,eAAyB,EACzBC,2BAAqC,EAErC/D,cACImC,MAAA,CAAOhC,EAAG,IAAKC,EAAG,QLVS,IKa/BiC,KAAKO,GACD1C,KAAKwB,MAAQkB,EAAMoB,cAActD,aLZL,GKa5BR,KAAK0B,SAASpB,IAAIN,KAAKwB,OAEnBxB,KAAK0B,SAASzB,GAAAA,EACdD,KAAK0B,SAASzB,EAAAA,EAETD,KAAK0B,SAASzB,EAAAA,GAAAA,EAAoCA,IACvDD,KAAK0B,SAASzB,EAAAA,EAAgBA,EAAAA,GAG9BD,KAAK0B,SAASxB,GAAAA,EACdF,KAAK0B,SAASxB,EAAAA,EAETF,KAAK0B,SAASxB,EAAAA,GAAAA,EAAoCA,IACvDF,KAAK0B,SAASxB,EAAAA,EAAgBA,EAAAA,GAKtC4C,KAAKiB,EAAsB1B,UACpB0B,EAAOC,UAAUtD,SL5BiB,IK6B7B2B,EAAYrC,KAAKyC,oBAAsBzC,KAAKwC,YAC5CxC,KAAKyC,oBAAsBJ,SACJrC,KAAK0B,SAAUqC,EAAOC,UAAW3B,QAMpEO,aAAaqB,OACLjE,KAAK4D,oBAEK,GAAG,KAEjB5D,KAAKuC,QAEDvC,KAAKuC,OAAS,WACA,GAAG,KACVvC,KAAK8B,MAGhB9B,KAAK4D,eAAgB,EACrB5D,KAAK6D,2BAA6BI,EL7CI,KKgD1CC,mBAAmB7B,GACXrC,KAAK4D,eAAiBvB,GAAarC,KAAK6D,6BACxC7D,KAAK4D,eAAgB,ICxDlB,MAAAO,EAEXC,QAAAA,GAEAC,mBAA6B,EAE7BC,mBAAAA,GACAC,oBAAAA,GAIAzE,cACIE,KAAKwE,OAAAA,IAAAA,EAGTC,QACIzE,KAAKwE,OAAAA,IAAAA,EACLxE,KAAKoE,QAAAA,GACLpE,KAAKsE,mBAAAA,GACLtE,KAAKuE,oBAAAA,GACLvE,KAAKqE,mBAAqB,EAI9BK,SAASrC,EAAmB0B,MAEnB/D,KAAKwE,OAAOlD,OAKjBtB,KAAKwE,OAAON,mBAAmB7B,GAG/BrC,KAAKwE,OAAOrC,KAAK4B,GAGjB/D,KAAKsE,mBAAmBK,QAAQ3E,KAAKwE,OAAO1B,KAAKiB,EAAQ1B,cAG9CuC,KAAQ5E,KAAKsE,mBAAAA,CACpBM,EAAKzC,iBAGM0C,KAAS7E,KAAKoE,QACjBS,EAAMlD,UAAUiD,KAChBC,EAAMjC,eACNgC,EAAK9C,OAMjB9B,KAAKoE,QAAUpE,KAAKoE,QAAQU,QAAOC,GAAKA,EAAEzD,kBAG/BuD,KAAS7E,KAAKoE,QACrBS,EAAM1C,OAGF0C,EAAMlD,UAAU3B,KAAKwE,SACrBxE,KAAKwE,OAAO5B,aAAaP,GAG7BrC,KAAKuE,oBAAoBI,QAAQE,EAAM/B,KAAK9C,KAAKwE,OAAO9C,SAAUW,cAI3DuC,KAAQ5E,KAAKuE,oBACpBK,EAAKzC,OAEDyC,EAAKjD,UAAU3B,KAAKwE,UACpBxE,KAAKwE,OAAO5B,aAAaP,GACzBuC,EAAK9C,OAKb9B,KAAKsE,mBAAqBtE,KAAKsE,mBAAmBQ,QAAOF,GAAQA,EAAKxC,QAAQC,KAC9ErC,KAAKuE,oBAAsBvE,KAAKuE,oBAAoBO,QAAOF,GAAQA,EAAKxC,QAAQC,MAG5EA,EAAYrC,KAAKqE,oBAA6C,GAAvBrE,KAAKoE,QAAQY,UACpDhF,KAAKoE,QAAQO,KAAK3E,KAAKiF,oBAEvBjF,KAAKqE,mBAAqBhC,ENhFA,MMqFlC4C,uBACQC,EAAAA,EAAgBC,gBAAAA,QACbD,EAAOpE,WAAWd,KAAKwE,OAAO9C,UNjGV,IMkGvBwD,EAAAA,EAAgBC,gBAAAA,gBAEHD,EAAAA,EAAeC,kBAAkB3E,aN/FZ,OOJ/B,MAAA4E,EAGXtF,YAAYuF,GACRrF,KAAKqF,OAASA,EAGlBC,eAAeC,SACLC,EAAMxF,KAAKqF,OAAOI,WAAW,MAC/BD,IACAA,EAAIE,UAAY,QAChBF,EAAIG,KAAO,aACXH,EAAII,SAASL,EAAS,GAAI,KAIlCM,KAAKC,SACKN,EAAMxF,KAAKqF,OAAOI,WAAW,MAC/BD,IACAA,EAAIO,UAAU,EAAG,EAAA/E,EAAef,EAAAA,EAAeC,GAC/CF,KAAKgG,OAAOR,GACZxF,KAAKiG,WAAWH,EAAMN,GACtBxF,KAAKkG,YAAYJ,EAAMN,GACvBxF,KAAKmG,sBAAsBL,EAAMN,GACjCxF,KAAKoG,qBAAqBN,EAAMN,IAIxCQ,OAAOR,GACHA,EAAIE,UAAY,uBAChBF,EAAIa,SAAS,EAAG,EAAArF,EAAef,EAAAA,EAAeC,GAGlD+F,WAAWH,EAAYN,kBACZ9D,EAAAA,MAAUF,GAASsE,EAAKtB,OAC/BgB,EAAIc,YAAc,MAClBd,EAAIE,UAAYI,EAAKtB,OAAOZ,cAAgB,MAAQ,SACpD4B,EAAIa,SACA3E,EAASzB,EAAAA,EACTyB,EAASxB,EAAAA,EPxCc,GAAA,IOoD/BgG,YAAYJ,EAAYN,GACpBA,EAAIc,YAAc,kBACPzB,KAASiB,EAAK1B,QACrBoB,EAAIe,WACA1B,EAAMnD,SAASzB,EAAAA,EACf4E,EAAMnD,SAASxB,EAAAA,EPtDG,GAAA,IO8D9BiG,sBAAsBL,EAAYN,GAC9BA,EAAIc,YAAc,kBACP1B,KAAQkB,EAAKxB,mBAAAA,CACpBkB,EAAIgB,YACJhB,EAAIiB,OAAO7B,EAAKlD,SAASzB,EAAG2E,EAAKlD,SAASxB,SACpCwG,EAAAA,IAAAA,EAAiB9B,EAAKlD,UAC5BgF,EAAIpG,IAAIsE,EAAKpD,OACbgE,EAAImB,OAAOD,EAAIzG,EAAGyG,EAAIxG,GACtBsF,EAAIoB,UAIZR,qBAAqBN,EAAYN,GAC7BA,EAAIc,YAAc,mBACP1B,KAAQkB,EAAKvB,oBAAAA,CACpBiB,EAAIgB,YACJhB,EAAIiB,OAAO7B,EAAKlD,SAASzB,EAAG2E,EAAKlD,SAASxB,SACpCwG,EAAAA,IAAAA,EAAiB9B,EAAKlD,UAC5BgF,EAAIpG,IAAIsE,EAAKpD,OACbgE,EAAImB,OAAOD,EAAIzG,EAAGyG,EAAIxG,GACtBsF,EAAIoB,WCnFD,MAAAC,EACXC,OAAiB,EAGjBC,mBAA6B,EAC7BC,mBAA6B,EAE7BC,aAAuB,EACvBC,iBAA2B,EAC3BC,aAAuB,EAEvBC,yBAAmC,yBAEnCtH,YAAYuH,SACFhC,EAASiC,SAASC,eAAeF,OAClChC,YACSmC,MAAM,4BAA4BH,GAE5ChC,EAAOoC,MAAMC,MAAAA,EAAoBzH,EAAE,KACnCoF,EAAOoC,MAAME,OAAAA,EAAqBzH,EAAE,KACpCmF,EAAOuC,aAAa,QAAA5G,EAAqBf,EAAE4H,YAC3CxC,EAAOuC,aAAa,SAAA5G,EAAsBd,EAAE2H,YAE5C7H,KAAK8F,KAAAA,IAAAA,EACL9F,KAAK8H,OAAAA,IAAAA,EAAoBzC,GAI7B0C,OAAOC,iBAAiB,oBAAqBjD,IACzC/E,KAAK8G,OAAQ,EACb9G,KAAKoH,yBAA2B,aAIxCa,mBAAmBlE,EAAsB1B,EAAoB,GACrD0B,EAAOmE,QAAQC,IAAMpE,EAAOmE,QAAQE,IAChC/F,EAAYrC,KAAKgH,mBR1BK,MQ2BtBhH,KAAK8F,KAAKrB,QACVzE,KAAKgH,mBAAqB3E,GAI9B0B,EAAOmE,QAAQG,OACXhG,EAAYrC,KAAK+G,mBRjCK,MQkCtB/G,KAAK8G,OAAS9G,KAAK8G,MACnB9G,KAAK+G,mBAAqB1E,GAKtCiG,kBAAkBjG,EAAmB,SAC3BkG,EAAOlG,EAAYrC,KAAKiH,aAC9BjH,KAAKiH,aAAe5E,EAChBrC,KAAK8G,MACL9G,KAAKkH,kBAAoBqB,EAEzBvI,KAAKmH,cAAgBoB,EAI7BC,KAAQnG,IACJrC,KAAKsI,kBAAkBjG,SAEjB0B,EJ5CP,iBACGZ,EAAUC,UAAUC,cAAc,GAKlC6E,EAAAA,CACFC,GAAMhF,GAAS+E,UAAQ,IAAGO,UAAW,EACrCL,GAAMjF,GAAS+E,UAAQ,IAAGO,UAAW,EACrCJ,MAASlF,GAAS+E,UAAQ,IAAGO,UAAW,UAYxC3E,cATEA,IAAAA,EAAAA,CACF7D,EAAGkD,GAASuF,OAAK,IAAM,EACvBxI,EAAGiD,GAASuF,OAAK,IAAM,IAQvB1E,UANEA,IAAAA,EAAAA,CACF/D,EAAGkD,GAASuF,OAAK,IAAM,EACvBxI,EAAGiD,GAASuF,OAAK,IAAM,IAKvBR,QAAAA,GIqBMnE,GAEN/D,KAAKiI,mBAAmBlE,EAAQ1B,GAE3BrC,KAAK8G,OACN9G,KAAK8F,KAAKpB,SAAS1E,KAAKmH,aAAcpD,GAG1C/D,KAAK8H,OAAOjC,KAAK7F,KAAK8F,MAElB9F,KAAK8G,OACL9G,KAAK8H,OAAOxC,eAAetF,KAAKoH,0BAGpCuB,sBAAsB3I,KAAKwI,OC3EnClB,SAASU,iBAAiB,oBAL1B,WACUY,IAAAA,EAAsB,QACxBJ","sources":["./src/com/Vector.ts","./src/com/Constants.ts","./src/com/Entity.ts","./src/com/Projectile.ts","./src/com/Enemy.ts","./src/com/PlayerInput.ts","./src/com/Player.ts","./src/com/Game.ts","./src/draw/Drawer.ts","./src/Application.ts","./src/index.ts"],"sourcesContent":["\nexport interface IVector {\n    x?: number;\n    y?: number;\n}\n\nexport class Vector implements IVector{\n    x: number;\n    y: number;\n\n    constructor(v: IVector) {\n        this.x = v.x ?? 0;\n        this.y = v.y ?? 0;\n    }\n\n    static getRandomVector(max?: IVector): Vector {\n        return new Vector({\n            x: Math.random()* (max?.x || 1),\n            y: Math.random()* (max?.y || 1)\n        });\n    }\n\n    add(v: Vector): Vector {\n        this.x += v.x;\n        this.y += v.y;\n        return this;\n    }\n\n    minus(v: Vector): Vector {\n        this.x -= v.x;\n        this.y -= v.y;\n        return this;\n    }\n\n    multByScalar(scalar: number): Vector {\n        this.x *= scalar;\n        this.y *= scalar;\n        return this;\n    }\n\n    lenght(): number {\n        return Math.sqrt( this.x**2 + this.y**2 );\n    }\n\n    normalize(): Vector {\n        const tmpL = this.lenght();\n        this.x /= tmpL;\n        this.y /= tmpL;\n        return this;\n    }\n\n    distanceTo(other: Vector): number {\n        return Math.sqrt( (this.x-other.x)**2 + (this.y-other.y)**2 );\n    }\n \n}","import {Vector} from \"./Vector\";\n\nexport const GAME_LIMITS: Vector = new Vector({x: 800, y: 400});\nexport const PLAYER_SIZE: number = 20;\nexport const PLAYER_HALF_SIZE: number = PLAYER_SIZE / 2.;\nexport const PLAYER_SPEED: number = 2;\nexport const ENEMY_SIZE: number = 15;\nexport const ENEMY_HALF_SIZE: number = ENEMY_SIZE / 2.;\nexport const ENEMY_MAX_LINEAR_SPEED: number = 1.5;\nexport const FIRE_INPUT_MIN_LENGTH: number = 0.20;\nexport const PROJECTILE_SIZE: number = 4;\nexport const PROJECTILE_SPEED: number = 4;\nexport const PROJECTILE_LIFETIME_MS: number = 1500;\nexport const MAX_SPAWN_TIME: number = 4000;\nexport const PLAYER_INVINCIBILITY_TIMEFRAME = 1000;\nexport const SPECIAL_INPUTS_LATENCY = 1000;","import { PlayerInputs } from \"./PlayerInput\";\nimport {Vector, IVector} from \"./Vector\";\n\nexport abstract class Entity {\n    position: Vector;\n    speed: Vector;\n    size: number;\n    alive: boolean = true;\n\n    constructor(pos: IVector, speed: IVector, size?: number) {\n        this.position = new Vector(pos);\n        this.speed = new Vector(speed);\n        this.size = size ?? 0;\n    }\n\n    abstract move(input?: PlayerInputs): void;\n    \n    intersect(other: Entity): boolean {\n        if (!this.alive || !other.alive) {\n            return false;\n        }\n        const threshold = this.size/2 + other.size/2;\n\n        const distance = (new Vector(this.position)).minus(other.position).lenght();\n        return distance < threshold;\n    }\n\n    die(): void {\n        this.alive = false;\n    }\n\n\n}","import { PROJECTILE_LIFETIME_MS, PROJECTILE_SIZE, PROJECTILE_SPEED } from \"./Constants\";\nimport { Entity } from \"./Entity\";\nimport { IVector } from \"./Vector\";\n\nexport default class Projectile extends Entity {\n    deathTimestamp: number;\n\n    constructor(pos: IVector, speed: IVector, spawnTimestamp: number) {\n        super(pos, speed, PROJECTILE_SIZE);\n\n        this.speed.normalize().multByScalar(PROJECTILE_SPEED);\n\n        this.deathTimestamp = spawnTimestamp+PROJECTILE_LIFETIME_MS;\n    }\n\n    move(): void {\n        this.position.add(this.speed);\n    }\n\n    isAlive(timestamp: number): boolean {\n        return this.alive && this.deathTimestamp > timestamp;\n    }\n\n}","import { ENEMY_HALF_SIZE, ENEMY_SIZE, GAME_LIMITS } from \"./Constants\";\nimport { Entity } from \"./Entity\";\nimport { PlayerInputs } from \"./PlayerInput\";\nimport Projectile from \"./Projectile\";\nimport { IVector, Vector } from \"./Vector\";\n\nexport default class Enemy extends Entity {\n    lives:number = 3;\n    fire_delay: number = 2500;\n    last_fire_timestamp: number = 0;\n\n    constructor(pos: IVector, speed: IVector) {\n        super(pos, speed, ENEMY_SIZE);\n    }\n\n    move(input?: PlayerInputs): void {\n        const tmpPos = new Vector(this.position);\n        tmpPos.add(this.speed);\n\n        if (tmpPos.x-ENEMY_HALF_SIZE <= 0 || tmpPos.x+ENEMY_HALF_SIZE >= GAME_LIMITS.x) {\n            this.speed.x *= -1;\n        }\n        if (tmpPos.y-ENEMY_HALF_SIZE <= 0 || tmpPos.y+ENEMY_HALF_SIZE >= GAME_LIMITS.y) {\n            this.speed.y *= -1;\n        }\n        this.position.add(this.speed);\n    }\n\n    decreaseLife(val: number = 1) {\n        this.lives -= val;\n        if (this.lives <= 0) {\n            this.die();\n        }\n    }\n\n    fire(targetPos: Vector, timestamp: number): Array<Projectile> {\n        // delay first shot - too hard to dodge !\n        if (this.last_fire_timestamp === 0) {\n            this.last_fire_timestamp = timestamp;\n        }\n        else if (timestamp - this.last_fire_timestamp > this.fire_delay) {\n            this.last_fire_timestamp = timestamp;\n            const speed = (new Vector(targetPos)).minus(this.position);\n            return [new Projectile(this.position, speed , timestamp) ];\n        }\n        return [];\n    }\n\n}","import { Vector } from \"./Vector\";\n\nexport interface PlayerInputs {\n    positionInput: Vector;\n    fireInput: Vector;\n    buttons: {\n        'L1': boolean,\n        'R1': boolean,\n        'Pause': boolean\n    }\n};\n\nexport function gamePadRumble(force: number, duration: number) {\n    const gamePad = navigator.getGamepads()[0];\n    if (gamePad) {\n        gamePad.vibrationActuator.playEffect(\"dual-rumble\", {\n            startDelay: 0,\n            duration,\n            weakMagnitude: force,\n            strongMagnitude: force\n        });\n    }\n}\n\nexport function getCurrentInput(): PlayerInputs {\n    const gamePad = navigator.getGamepads()[0];\n\n    // L1 = 4\n    // R1 = 5\n    // options/start = 9\n    const buttons = {\n        'L1': gamePad?.buttons[4].pressed ?? false,\n        'R1': gamePad?.buttons[5].pressed ?? false,\n        'Pause': gamePad?.buttons[9].pressed ?? false\n    };\n\n    const positionInput = new Vector({\n        x: gamePad?.axes[0] ?? 0,\n        y: gamePad?.axes[1] ?? 0\n    });\n    const fireInput = new Vector({\n        x: gamePad?.axes[2] ?? 0,\n        y: gamePad?.axes[3] ?? 0\n    });\n    return {\n        positionInput,\n        fireInput,\n        buttons\n    };\n};\n\n","import { FIRE_INPUT_MIN_LENGTH, GAME_LIMITS, PLAYER_HALF_SIZE, PLAYER_INVINCIBILITY_TIMEFRAME, PLAYER_SIZE, PLAYER_SPEED } from \"./Constants\";\nimport { Entity } from \"./Entity\";\nimport { gamePadRumble, PlayerInputs } from \"./PlayerInput\";\nimport Projectile from \"./Projectile\";\n\nexport default class Player extends Entity {\n    fire_delay: number = 250;\n    last_fire_timestamp: number = 0;\n    lives: number = 3;\n    is_invincible: boolean = false;\n    invincible_until_timestamp: number = 0;\n\n    constructor() {\n        super({x: 250, y: 250}, {}, PLAYER_SIZE);\n    }\n\n    move(input: PlayerInputs): void {\n        this.speed = input.positionInput.multByScalar(PLAYER_SPEED);\n        this.position.add(this.speed);\n\n        if (this.position.x <= PLAYER_HALF_SIZE) {\n            this.position.x = PLAYER_HALF_SIZE;\n        }\n        else if (this.position.x + PLAYER_HALF_SIZE >= GAME_LIMITS.x) {\n            this.position.x = GAME_LIMITS.x - PLAYER_HALF_SIZE;\n        }\n\n        if (this.position.y <= PLAYER_HALF_SIZE) {\n            this.position.y = PLAYER_HALF_SIZE;\n        }\n        else if (this.position.y + PLAYER_HALF_SIZE >= GAME_LIMITS.y) {\n            this.position.y = GAME_LIMITS.y - PLAYER_HALF_SIZE;\n        }\n\n    }\n\n    fire(inputs: PlayerInputs, timestamp: number): Array<Projectile> {\n        if(inputs.fireInput.lenght() > FIRE_INPUT_MIN_LENGTH) {\n            if (timestamp - this.last_fire_timestamp > this.fire_delay) {\n                this.last_fire_timestamp = timestamp;\n                return [new Projectile(this.position, inputs.fireInput, timestamp) ];\n            }\n        }\n        return [];\n    }\n\n    decreaseLife(touchTimestamp: number): void {\n        if (this.is_invincible) return;\n\n        gamePadRumble(.5,500);\n\n        this.lives--;\n\n        if (this.lives <= 0){\n            gamePadRumble(.8,1000);\n            return this.die();\n        }\n\n        this.is_invincible = true;\n        this.invincible_until_timestamp = touchTimestamp + PLAYER_INVINCIBILITY_TIMEFRAME;\n    }\n\n    checkInvincibility(timestamp: number): void {\n        if (this.is_invincible && timestamp >= this.invincible_until_timestamp) {\n            this.is_invincible = false;\n        }\n    }\n\n};","import { ENEMY_MAX_LINEAR_SPEED, FIRE_INPUT_MIN_LENGTH, GAME_LIMITS, MAX_SPAWN_TIME, PLAYER_SIZE, PLAYER_SPEED } from \"./Constants\";\nimport Enemy from \"./Enemy\";\nimport { Entity } from \"./Entity\";\nimport Player from \"./Player\";\nimport { PlayerInputs } from \"./PlayerInput\";\nimport Projectile from \"./Projectile\";\nimport { Vector } from \"./Vector\";\n\nexport default class Game {\n    player: Player;\n    enemies: Array<Enemy> = [];\n\n    nextSpawnTimestamp: number = 0;\n\n    allies_projectiles: Array<Projectile> = [];\n    enemies_projectiles: Array<Projectile> = [];\n\n    particules?: any;\n\n    constructor() {\n        this.player = new Player();\n    }\n\n    reset() {\n        this.player = new Player();\n        this.enemies = [];\n        this.allies_projectiles = [];\n        this.enemies_projectiles = [];\n        this.nextSpawnTimestamp = 0;\n    }\n\n\n    schedule(timestamp: number, inputs: PlayerInputs) {\n        // check player status\n        if (!this.player.alive) {\n            // console.log('terminé');\n            return;\n        }\n\n        this.player.checkInvincibility(timestamp);\n\n        // move player\n        this.player.move(inputs);\n\n        // fire\n        this.allies_projectiles.push(...this.player.fire(inputs, timestamp));\n\n        // move projectiles\n        for (const proj of this.allies_projectiles) {\n            proj.move();\n\n            // allies_proj collisions\n            for (const enemy of this.enemies) {\n                if (enemy.intersect(proj)) {\n                    enemy.decreaseLife();\n                    proj.die();\n                }\n            }\n        }\n        \n        // purge enemies\n        this.enemies = this.enemies.filter(e => e.alive);\n\n        // move enemies\n        for (const enemy of this.enemies) {\n            enemy.move();\n\n            // +  enemy body collision w/ player\n            if (enemy.intersect(this.player)) {\n                this.player.decreaseLife(timestamp);\n            }\n            // +  enemy fire\n            this.enemies_projectiles.push(...enemy.fire(this.player.position, timestamp));\n        }\n\n        // enemy_proj move + collisions\n        for (const proj of this.enemies_projectiles) {\n            proj.move();\n\n            if (proj.intersect(this.player)) {\n                this.player.decreaseLife(timestamp);\n                proj.die();\n            }\n        }\n\n        // purge projectiles\n        this.allies_projectiles = this.allies_projectiles.filter(proj => proj.isAlive(timestamp));\n        this.enemies_projectiles = this.enemies_projectiles.filter(proj => proj.isAlive(timestamp));\n\n        // spawn\n        if (timestamp > this.nextSpawnTimestamp || this.enemies.length == 0) {\n            this.enemies.push(this.spawnRandomEnemy());\n\n            this.nextSpawnTimestamp = timestamp + MAX_SPAWN_TIME;\n        }\n        \n    }\n    \n    spawnRandomEnemy() {\n        let rdmPos = Vector.getRandomVector(GAME_LIMITS);\n        while (rdmPos.distanceTo(this.player.position) < PLAYER_SIZE) {\n            rdmPos = Vector.getRandomVector(GAME_LIMITS);\n        }\n        return new Enemy(rdmPos, Vector.getRandomVector().multByScalar(ENEMY_MAX_LINEAR_SPEED) )\n    }\n\n}","import { ENEMY_HALF_SIZE, ENEMY_SIZE, GAME_LIMITS, PLAYER_HALF_SIZE, PLAYER_SIZE, PROJECTILE_SIZE } from \"../com/Constants\";\nimport Game from \"../com/Game\";\nimport { Vector } from \"../com/Vector\";\n\nexport default class Drawer {\n    canvas: HTMLCanvasElement;\n\n    constructor(canvas: HTMLCanvasElement) {\n        this.canvas = canvas;\n    }\n\n    displayMessage(message: string) {\n        const ctx = this.canvas.getContext('2d');\n        if (ctx) {\n            ctx.fillStyle = 'black';\n            ctx.font = '48px serif';\n            ctx.fillText(message, 10, 50);\n        }\n    }\n\n    draw(game: Game) {\n        const ctx = this.canvas.getContext('2d');\n        if (ctx) {\n            ctx.clearRect(0, 0, GAME_LIMITS.x, GAME_LIMITS.y);\n            this.drawBG(ctx);\n            this.drawPlayer(game, ctx);\n            this.drawEnemies(game, ctx);\n            this.drawAlliesProjectiles(game, ctx);\n            this.drawEnemyProjectiles(game, ctx);\n        }\n    }\n\n    drawBG(ctx: CanvasRenderingContext2D) {\n        ctx.fillStyle = 'rgba(200,200,200,.8)';\n        ctx.fillRect(0, 0, GAME_LIMITS.x, GAME_LIMITS.y);\n    }\n\n    drawPlayer(game: Game, ctx: CanvasRenderingContext2D) {\n        const {position, speed} = game.player;\n        ctx.strokeStyle = 'red';\n        ctx.fillStyle = game.player.is_invincible ? 'red' : 'orange';\n        ctx.fillRect(\n            position.x - PLAYER_HALF_SIZE,\n            position.y - PLAYER_HALF_SIZE,\n            PLAYER_SIZE,\n            PLAYER_SIZE);\n\n        // ctx.beginPath();\n        // ctx.moveTo(position.x,position.y);\n        // const tmp = new Vector(position);\n        // tmp.add(speed);\n        // ctx.lineTo(tmp.x, tmp.y);\n        // ctx.stroke();\n    }\n\n    drawEnemies(game: Game, ctx: CanvasRenderingContext2D) {\n        ctx.strokeStyle = 'green';\n        for (const enemy of game.enemies) {\n            ctx.strokeRect(\n                enemy.position.x - ENEMY_HALF_SIZE,\n                enemy.position.y - ENEMY_HALF_SIZE,\n                ENEMY_SIZE,\n                ENEMY_SIZE\n            );\n        }\n\n    }\n\n    drawAlliesProjectiles(game: Game, ctx: CanvasRenderingContext2D) {\n        ctx.strokeStyle = 'brown';\n        for (const proj of game.allies_projectiles) {\n            ctx.beginPath();\n            ctx.moveTo(proj.position.x, proj.position.y);\n            const tmp = new Vector(proj.position);\n            tmp.add(proj.speed);\n            ctx.lineTo(tmp.x, tmp.y);\n            ctx.stroke();\n        }\n    }\n\n    drawEnemyProjectiles(game: Game, ctx: CanvasRenderingContext2D) {\n        ctx.strokeStyle = 'purple';\n        for (const proj of game.enemies_projectiles) {\n            ctx.beginPath();\n            ctx.moveTo(proj.position.x, proj.position.y);\n            const tmp = new Vector(proj.position);\n            tmp.add(proj.speed);\n            ctx.lineTo(tmp.x, tmp.y);\n            ctx.stroke();\n        }\n    }\n\n}","import { GAME_LIMITS, SPECIAL_INPUTS_LATENCY } from \"./com/Constants\";\nimport Game from \"./com/Game\";\nimport Drawer from \"./draw/Drawer\";\nimport {getCurrentInput, PlayerInputs} from './com/PlayerInput';\n\nexport default class Application {\n    pause: boolean = true;\n    game: Game;\n    drawer: Drawer;\n    lastPauseTimeStamp: number = 0;\n    lastResetTimeStamp: number = 0;\n\n    tmpTimeStamp: number = 0;\n    timeSpentInPause: number = 0;\n    realGameTime: number = 0;\n\n    displayedMessageForPause: string = \"Waiting for gamePad...\";\n\n    constructor(canvasID: string) {\n        const canvas = document.getElementById(canvasID) as HTMLCanvasElement;\n        if (!canvas) {\n            throw new Error(\"Cant find canvas with id \"+canvasID);\n        } else {\n            canvas.style.width = GAME_LIMITS.x+'px';\n            canvas.style.height = GAME_LIMITS.y+'px';\n            canvas.setAttribute('width', GAME_LIMITS.x.toString());\n            canvas.setAttribute('height', GAME_LIMITS.y.toString());\n\n            this.game = new Game();\n            this.drawer = new Drawer(canvas);\n        }\n\n        // input gamepad events\n        window.addEventListener(\"gamepadconnected\", (e) => {\n            this.pause = false;\n            this.displayedMessageForPause = \"Pause !\";\n        });\n    }\n\n    checkSpecialInputs(inputs: PlayerInputs, timestamp: number = 0) {\n        if (inputs.buttons.L1 && inputs.buttons.R1) {\n            if (timestamp - this.lastResetTimeStamp > SPECIAL_INPUTS_LATENCY) {\n                this.game.reset();\n                this.lastResetTimeStamp = timestamp;\n            }\n        }\n\n        if (inputs.buttons.Pause) {\n            if (timestamp - this.lastPauseTimeStamp > SPECIAL_INPUTS_LATENCY) {\n                this.pause = !this.pause;\n                this.lastPauseTimeStamp = timestamp;\n            }\n        }\n    }\n\n    correctTimeStamps(timestamp:number = 0) {\n        const diff = timestamp - this.tmpTimeStamp;\n        this.tmpTimeStamp = timestamp;\n        if (this.pause) {\n            this.timeSpentInPause += diff;\n        } else {\n            this.realGameTime += diff;\n        }\n    }\n    \n    loop = (timestamp?: number) => {\n        this.correctTimeStamps(timestamp);\n\n        const inputs = getCurrentInput();\n\n        this.checkSpecialInputs(inputs, timestamp);\n\n        if (!this.pause) {\n            this.game.schedule(this.realGameTime, inputs);\n        }\n\n        this.drawer.draw(this.game);\n\n        if (this.pause) {\n            this.drawer.displayMessage(this.displayedMessageForPause);\n        }\n\n        requestAnimationFrame(this.loop);\n    }\n\n}","import Application from \"./Application\";\n\nfunction init () {\n    const app = new Application('main');\n    app.loop();\n}\n\ndocument.addEventListener('DOMContentLoaded', init );"],"names":["$f9a18ee3f7d45d0ad2fcdae4157db9d3$export$Vector","constructor","v","this","x","y","max","Math","random","add","minus","multByScalar","scalar","lenght","sqrt","normalize","tmpL","distanceTo","other","$f3620c22e110fbf4898f00310db65a10$export$GAME_LIMITS","$f3620c22e110fbf4898f00310db65a10$export$PLAYER_HALF_SIZE","$f3620c22e110fbf4898f00310db65a10$export$PLAYER_SIZE","$f3620c22e110fbf4898f00310db65a10$export$ENEMY_HALF_SIZE","$f3620c22e110fbf4898f00310db65a10$export$ENEMY_SIZE","$d213cfefffcbef50b09fafe077dfc2e3$export$Entity","alive","pos","speed","size","position","intersect","threshold","distance","die","$793db38c4fea658d9db77ab0ab71904e$export$default","spawnTimestamp","super","deathTimestamp","move","isAlive","timestamp","$c9369e3e6c88d72b4849bdf5d4502bf7$export$default","lives","fire_delay","last_fire_timestamp","input","tmpPos","decreaseLife","val","fire","targetPos","$8020c272b56f4800ea1c6e41707815bf$export$gamePadRumble","force","duration","gamePad","navigator","getGamepads","vibrationActuator","playEffect","startDelay","weakMagnitude","strongMagnitude","$0d9bdd3cea7474ee2bc11b071e461e2d$export$default","is_invincible","invincible_until_timestamp","positionInput","inputs","fireInput","touchTimestamp","checkInvincibility","$e592ad1078d5a01212c7f167146ecb31$export$default","enemies","nextSpawnTimestamp","allies_projectiles","enemies_projectiles","player","reset","schedule","push","proj","enemy","filter","e","length","spawnRandomEnemy","rdmPos","getRandomVector","$40b0018c3c22015aa4336c2618236c9c$export$default","canvas","displayMessage","message","ctx","getContext","fillStyle","font","fillText","draw","game","clearRect","drawBG","drawPlayer","drawEnemies","drawAlliesProjectiles","drawEnemyProjectiles","fillRect","strokeStyle","strokeRect","beginPath","moveTo","tmp","lineTo","stroke","$e779a980621a870b446c1bb8a47cb516$export$default","pause","lastPauseTimeStamp","lastResetTimeStamp","tmpTimeStamp","timeSpentInPause","realGameTime","displayedMessageForPause","canvasID","document","getElementById","Error","style","width","height","setAttribute","toString","drawer","window","addEventListener","checkSpecialInputs","buttons","L1","R1","Pause","correctTimeStamps","diff","loop","pressed","axes","requestAnimationFrame","app"],"version":3,"file":"index.bc94f647.js.map"}